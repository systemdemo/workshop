#!/usr/bin/env python3

import pathlib
import subprocess
from contextlib import suppress

ROOT_DIR = pathlib.Path(__file__).resolve().absolute().parent.parent

print(f"Provisioning host, from {ROOT_DIR}")

SYSTEMD_CONF = pathlib.Path("/etc/systemd/system")
SYSTEMD_CONF_PATH = pathlib.Path("/etc/systemd/system.conf.d")
PROFILE_D = pathlib.Path("/etc/profile.d/")

WORKSHOP = ROOT_DIR / "workshop"
CONF = ROOT_DIR / "conf"
BIN = ROOT_DIR / "bin"

OPT = pathlib.Path("/opt")

SYSTEMD_CONF_PATH.mkdir(parents=True, exist_ok=True)

# set symlinks if they dont exists

for mpath in [WORKSHOP, CONF, BIN]:
    dst = OPT / mpath.name
    if dst.exists():
        continue
    print(f"{dst} -> {mpath}")
    dst.symlink_to(mpath)


SYSTEMD_ENVS_SRC = [
    WORKSHOP_ENVS := CONF / "workshop-env.conf",
    WORKSHOP_LOCAL_ENVS := CONF / "workshop-env.local.conf",
]


BASHRC_LOCAL = CONF / "bashrc.local.conf"

SELINUX_CONFIG = CONF / "workshop-selinux-config"

if BASHRC_LOCAL.exists():
    # link local rc to set the editor
    pathlib.Path("/root/.bashrc.local").write_text(BASHRC_LOCAL.read_text())

if SELINUX_CONFIG.exists():
    pathlib.Path("/etc/selinux/config").write_text(SELINUX_CONFIG.read_text())
    subprocess.run(["setenforce", "Permissive"])

for unit in [*WORKSHOP.glob("**/systemd.units/*"), *CONF.glob("services/*.service")]:
    dst = SYSTEMD_CONF / unit.name
    if dst.exists():
        continue
    with suppress(Exception):
        dst.unlink()

    print(f"{dst} -> {unit}")
    dst.symlink_to(unit)

for unit in CONF.glob("services/*.service"):
    subprocess.run(["systemctl", "enable", unit.name])


for conf in SYSTEMD_ENVS_SRC:
    if not conf.exists():
        continue

    systemd_conf = SYSTEMD_CONF_PATH / conf.name
    org = systemd_conf.read_bytes() if systemd_conf.exists() else ""
    dst = conf.read_bytes()
    if org != dst:
        systemd_conf.write_bytes(dst)
        subprocess.run(["systemctl", "daemon-reload"], check=True)

for conf in CONF.glob("profile.d/*"):
    conf_name = conf.name
    dst_conf = PROFILE_D / conf_name

    if dst_conf.exists():
        dst_conf.unlink()

    print(f"{dst_conf} -> {conf}")
    dst_conf.symlink_to(conf)
