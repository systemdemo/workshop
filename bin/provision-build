#!/bin/bash
set -ex

#maybe create a dummy user

if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

echo command executed as $(whoami)

DEBIAN_ROOT="/opt/debian"
PYSTEMD_SRC="/opt/pystemd"
PYSTEMD_REPO="https://github.com/systemd/pystemd"

sudo mkdir -p "$DEBIAN_ROOT" "$PYSTEMD_SRC"
sudo dnf install -y git\
    kernel-core\
    gcc\
    debootstrap\
    systemd-devel\
    systemd-container\
    mkosi\
    fakeroot\
    fakechroot\
    vim\
    tmux\
    links\
    nginx\
    strace\
    bcc-tools\
    bpftrace\
    python3-bcc\
    procps\
    passwd\
    lsof\
    wireshark-cli\
    util-linux-user\
    iputils\
    htop\
    stress\
    bash-completion\
    python3-devel\
    systemtap\
    systemtap-sdt-devel\
    readline-devel \
    libuuid-devel \
    gcc \
    systemtap-sdt-devel \
    readline-devel \
    openssl-devel \
    zlib-devel \
    libffi-devel \
    g++

  
# not installed packages
#      xq
#      python3-Cython python3-wheel python3-dnslib
#      python3-dnslib\
#      python3-cachetools\
#      python3-ipython\

# make sure we have the latest kernel and the latest kernel modules

python3 -m pip install ipython pystemd climage pygments

sudo dnf upgrade -y kernel-core kernel-devel

rm -f /usr/lib/systemd/system/service.d/10-timeout-abort.conf


if [[ -e /usr/lib/systemd/system/vboxadd.service ]]; then
    echo "enabling vbox special services"
    sudo systemctl enable vboxadd.service vboxadd-service.service
fi

sudo systemctl disable auditd.service
sudo systemctl reset-failed


test -e ${DEBIAN_ROOT}/etc/os-release || sudo debootstrap --include 'dbus,vim' stable "$DEBIAN_ROOT"
test -e ${PYSTEMD_SRC}/setup.py || sudo git clone $PYSTEMD_REPO $PYSTEMD_SRC



mkdir -p /etc/systemd/system.conf.d

if [[ -e "/home/vagrant" ]]; then
    # sets a shell for vagrant users
    cat <<EOF > /home/vagrant/.bash_profile
# .bash_profile
# this file was created for the workflow to move directly to root

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi

# auto cd into workshop directory
test -e /usr/local/src/workshop/workshop && cd /usr/local/src/workshop/workshop

# lets move to root
exec sudo su -

EOF
fi


if [[ -e "/home/ec2-user" ]]; then
    # sets a shell for vagrant users
    cat <<EOF > /home/ec2-user/.bash_profile
# .bash_profile
# this file was created for the workflow to move directly to root

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi

# auto cd into workshop directory
test -e /usr/local/src/workshop/workshop && cd /usr/local/src/workshop/workshop

# lets move to root
exec sudo su -

EOF
fi

cat <<EOF > /root/.bash_profile
# .bash_profile

test -e /usr/local/src/workshop/workshop && cd /usr/local/src/workshop/workshop

# lets clean failed units
systemctl reset-failed

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi

if [ -f ~/.bashrc.local ]; then
    . ~/.bashrc.local
fi

EOF

sudo cat <<EOF > /root/.tmux.conf
new-session
set-option -g -q mouse on

# starts windows from 1 (easy on the keyboard)
set -g base-index 1
# also rename them if i destroy one
set -g renumber-windows on


set -g default-terminal "screen-256color"
set -g history-limit 30000
bind -n C-k send-keys C-e \; send-keys -R \;  send-keys C-l \; clear-history


# reload my tmux config (it destroy my session?)
bind-key r source-file ~/.tmux.conf

# destroy panel/win
bind-key q kill-pane
bind-key Q kill-window

EOF


cat <<EOF > /etc/profile.d/workshop2path.sh
if [[ -e "/usr/local/src/workshop" ]]; then
        export PATH="/usr/local/src/workshop/bin:\${PATH}"
        cd /usr/local/src/workshop/workshop
fi
EOF

# compile python with dtrace support

cpython_bin="/opt/cpython/bin/python3"

if [ ! -f "$cpython_bin" ]; then
  if [ ! -f "/usr/local/src/Python-3.12.2" ]; then
    wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tgz -O /usr/local/src/Python-3.12.2.tgz
    cd /usr/local/src/ && tar xzf  Python-3.12.2.tgz
  fi

  cd /usr/local/src/Python-3.12.2
  ./configure \
      --with-dtrace \
      --with-readline \
      --disable-shared \
      --enable-loadable-sqlite-extensions \
      --prefix /opt/cpython
  make -j 10
  make install
fi


# this hack over here is for linode's weird kernel
# but i should probably fix this
kernel_version=$(uname -r)
highest_dir=$(find /usr/src/kernels/* -type f -name vmlinux.h -exec dirname {} \; | sort -r | head -n 1)

# Loop through each directory in /lib/modules/
for dir in /lib/modules/*; do
  # Check if there is a "build" file or directory inside the directory
  build_dir="${dir}/build"
  kernel_version=$(basename "$dir")
  dst_dir="/usr/src/kernels/{$kernel_version}"

  if [ -h $build_dir ] && [ ! -e $build_dir ]; then
    # check if build dir is symlink that point to nothing, delete the symlink
    rm -rf "${build_dir}"
  fi
  if [ -e $build_dir ] && [ -z "$(ls -A ${build_dir})" ]; then
    # checks if $build_dir exists but points to a empty something
    rm -rf "${build_dir}"
  fi

  if [ ! -e "$build_dir" ]; then
    if [ -e "$dst_dir"  ]; then
      ln -s "$dst_dir" "$build_dir"
    else
      ln -s "$highest_dir" "$build_dir"
    fi
  fi

done

# The slides are here:
# https://docs.google.com/presentation/d/1tLomGSIBcfS2FI-3QyDoPBqM_RTcT4KsVJB0y5nVkrc/edit#slide=id.g1fd3f2d1519_0_0

# cleanup root 
sudo dnf clean all 
sudo rm -f  /home/*/.bash_history /root/.bash_history
sudo rm -rf  /var/log/*
sudo rm -rf /usr/local/src/Python-3.12.2.tgz /usr/local/src/Python-3.12.2

